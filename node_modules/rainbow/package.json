{
  "name": "rainbow",
  "description": "Express router middleware for RESTful API base on certain folder path",
  "version": "0.2.0",
  "author": {
    "name": "mytharcher",
    "email": "mytharcher@gmail.com"
  },
  "main": "lib/rainbow",
  "dependencies": {
    "glob": "3.x",
    "methods": "0.0.1"
  },
  "keywords": [
    "express",
    "middleware",
    "web",
    "rest",
    "restful",
    "router",
    "app",
    "api",
    "ajax",
    "controller",
    "filter"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/mytharcher/rainbow.git"
  },
  "engines": {
    "node": "*"
  },
  "readme": "Rainbow\n=======\n\n[简体中文](http://mytharcher.github.com/posts/npm-rainbow.html)\n\nA node [Express][] router middleware for Ajax RESTful API base on certain folder path.\n\nRainbow mapping all HTTP request route to controllers folder each as path to file as URL.\n\n## Installation ##\n\n```bash\n$ npm install rainbow\n```\n\n## Usage ##\n\nIn your express application main file `app.js`:\n\n```javascript\nvar express = require('express');\nvar rainbow = require('rainbow');\n\nvar app = express();\n\n// Here using Rainbow to initialize all routers\nrainbow.route(app);\n\napp.listen(6060);\n```\n\n### Controllers ###\n\nAll your controllers for catching HTTP request should be defined in each file in `controllers/` folder (could be changed) as same path in URL.\n\nThis is the core design for Rainbow! And it makes routing much simpler only by files' paths!\n\nHere writes a router `something.js` in your `controllers/` folder like this:\n\n```javascript\nexports.get = function (req, res, next) {\n\tres.send(200, 'Simple getting.');\n};\n```\n\nIf you need some filters, just add a `filters` array property which contains your filters in `filters/` folder to the handle function like this:\n\n```javascript\nexports.get = function (req, res, next) {\n\tres.send(200, 'Simple getting.');\n};\n// add filters\nexports.get.filters = ['authorization'];\n```\n\nAlso you could define other HTTP methods handlers, but make sure in one file each URL! Example in `controllers/user.js`:\n\n```javascript\nexports.get = function (req, res, next) {\n\tUser.find({where: req.query.name}).success(function (user) {\n\t\tres.send(200, user);\n\t});\n};\n\nexports.put = function (req, res, next) {\n\tUser.create(req.body).success(function (user) {\n\t\tres.send(201, user.id);\n\t});\n};\n\n// You can also define `post` and `delete` handlers.\n// ...\n```\n\nIf you want all methods to be process in only one controller(something not RESTful), just make exports to be the handle function:\n\n```javascript\nmodule.exports = function (req, res, next) {\n\t// all your process\n};\n```\n\nYou can write controllers with coffeescript using `.coffee` in example `controllers/user.coffee`:\n\n```coffeescript\nexports.get = (req, res, next) ->\n\tUser.find(where: req.query.name)\n\t.success (user) ->\n\t\tres.send 200, user\n\nexports.put = (req, res, next) ->\n\tUser.create(req.body)\n\t.success (user) ->\n\t\tres.send 201, user.id\n```\n\n### Params ###\n\nRainbow started to support param form URL from version 0.1.0. Now you can define your controllers URL with params resolved by native Express like this:\n\n```javascript\nexports.get = function (req, res, next) {\n\tvar id = req.params.id;\n\t// your business\n};\n\nexports.get.params = ':id?';\n```\n\nOr you can use regular expression also:\n\n```javascript\nexports.get = function (req, res, next) {\n\tconsole.log(req.params);\n}\n\nexports.get.params = /(\\d+)(?:\\.\\.(\\d+))?/;\n```\n\nBut make sure no regular expression `^` used as starter and `$` as ender, or rainbow could not resolve the expression correctly.\n\n### Filters ###\n\nMake sure the filters you need had been defined in `filters/` folder (could be changed) as same module name, because them will be required when initilizing. Here `authorization.js` is a example for intecepting by non-authenticated user before `GET` `http://yourapp:6060/something`:\n\n```javascript\nmodule.exports = function (req, res, next) {\n\tconsole.log('processing authorization...');\n\tvar session = req.session;\n\t\n\tif (session.userId) {\n\t\tconsole.log('user(%d) in session', session.userId);\n\t\tnext();\n\t} else {\n\t\tconsole.log('out of session');\n\t\t// Async filter is ok with express!\n\t\tdb.User.find().success(function (user) {\n\t\t\tif (!user) {\n\t\t\t\tres.send(403);\n\t\t\t\tres.end();\n\t\t\t}\n\t\t});\n\t}\n};\n```\n\nYou could see filters is as same as a origin router in Express, just be put together in `filters/` folder to be interceptors like in Java SSH.\n\n### Change default path ###\n\nControllers and filters default path could be changed by passing a path config object to `route` function when initializing:\n\n```javascript\nrainbow.route(app, {\n\tcontrollers: '/your/controllers/path',\n\tfilters: '/your/filters/path'\n});\n```\n\nThese paths are all **RELATIVE** to your app path!\n\n## Troubleshooting ##\n\n0. Gmail me: mytharcher\n0. Write a [issue](https://github.com/mytharcher/rainbow/issues)\n0. Send your pull request to me.\n\n## MIT Licensed ##\n\n-EOF-\n\n[Express]: http://expressjs.com/\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mytharcher/rainbow/issues"
  },
  "_id": "rainbow@0.2.0",
  "dist": {
    "shasum": "337f5fa165455dabd871654b6b4c9be0edd956ca"
  },
  "_from": "rainbow@0.2.0",
  "_resolved": "https://registry.npmjs.org/rainbow/-/rainbow-0.2.0.tgz"
}
